{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/wendykelly/Desktop/explicit-christian/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wendykelly/Desktop/explicit-christian/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useRef, useState } from 'react';\nimport Section from './subscribe.style';\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  var inputEl = useRef(null); // 2. Hold a message in state to handle the response from our API.\n\n  var _useState = useState(''),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  var subscribe = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, _yield$res$json, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault(); // 3. Send a request to our API with the user's email address.\n\n              _context.next = 3;\n              return fetch('/api/subscribe', {\n                body: JSON.stringify({\n                  email: inputEl.current.value\n                }),\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST'\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              error = _yield$res$json.error;\n\n              if (!error) {\n                _context.next = 11;\n                break;\n              }\n\n              // 4. If there was an error, update the message in state.\n              setMessage(error);\n              return _context.abrupt(\"return\");\n\n            case 11:\n              // 5. Clear the input value and show a success message.\n              inputEl.current.value = '';\n              setMessage('Success! ðŸŽ‰ You are now subscribed to the newsletter.');\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function subscribe(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(Section, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"text-4xl md:text-6xl font-bold tracking-tighter leading-tight md:pr-8\",\n      children: message ? message : \"Stay Connected:\"\n    }), /*#__PURE__*/_jsxs(\"form\", {\n      onSubmit: subscribe,\n      children: [/*#__PURE__*/_jsx(\"label\", {\n        htmlFor: \"email-input\",\n        children: ' '\n      }), /*#__PURE__*/_jsx(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        placeholder: \"Email:\",\n        ref: inputEl,\n        required: true,\n        type: \"email\"\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          type: \"submit\",\n          children: 'Submit '\n        })\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}