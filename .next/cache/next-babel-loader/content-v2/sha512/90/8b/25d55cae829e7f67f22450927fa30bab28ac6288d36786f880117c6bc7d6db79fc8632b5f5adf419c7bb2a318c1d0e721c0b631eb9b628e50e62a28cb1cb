{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/wendykelly/Desktop/explicit-christian/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wendykelly/Desktop/explicit-christian/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/wendykelly/Desktop/explicit-christian/components/Subscribe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Section from './subscribe.style';\nexport default function Subscribe() {\n  _s();\n\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  var inputEl = useRef(null); // 2. Hold a message in state to handle the response from our API.\n\n  var _useState = useState(''),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  var subscribe = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, _yield$res$json, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault(); // 3. Send a request to our API with the user's email address.\n\n              _context.next = 3;\n              return fetch('/api/subscribe', {\n                body: JSON.stringify({\n                  email: inputEl.current.value\n                }),\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST'\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              error = _yield$res$json.error;\n\n              if (!error) {\n                _context.next = 11;\n                break;\n              }\n\n              // 4. If there was an error, update the message in state.\n              setMessage(error);\n              return _context.abrupt(\"return\");\n\n            case 11:\n              // 5. Clear the input value and show a success message.\n              inputEl.current.value = '';\n              setMessage('Success! ðŸŽ‰ You are now subscribed to the newsletter.');\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function subscribe(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-6xl md:text-6xl font-bold tracking-tighter leading-tight md:pr-8 p-4\",\n      children: message ? message : \"Newsletter? Yes!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: subscribe,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email-input\",\n        children: ' '\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        placeholder: \"Email\",\n        ref: inputEl,\n        required: true,\n        type: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8 pt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: 'Submit '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Subscribe, \"xHuLPLOnul5/Vf4i/MJNy/N0Z2s=\");\n\n_c = Subscribe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Subscribe\");","map":{"version":3,"sources":["/Users/wendykelly/Desktop/explicit-christian/components/Subscribe/index.js"],"names":["React","useRef","useState","Section","Subscribe","inputEl","message","setMessage","subscribe","e","preventDefault","fetch","body","JSON","stringify","email","current","value","headers","method","res","json","error"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC;AACA,MAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB,CAFkC,CAGlC;;AAHkC,kBAIJC,QAAQ,CAAC,EAAD,CAJJ;AAAA,MAI3BI,OAJ2B;AAAA,MAIlBC,UAJkB;;AAMlC,MAAMC,SAAS;AAAA,wEAAG,iBAAOC,CAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBA,cAAAA,CAAC,CAACC,cAAF,GADgB,CAGhB;;AAHgB;AAAA,qBAIEC,KAAK,CAAC,gBAAD,EAAmB;AACxCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,KAAK,EAAEV,OAAO,CAACW,OAAR,CAAgBC;AADJ,iBAAf,CADkC;AAIxCC,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT,iBAJ+B;AAOxCC,gBAAAA,MAAM,EAAE;AAPgC,eAAnB,CAJP;;AAAA;AAIVC,cAAAA,GAJU;AAAA;AAAA,qBAcQA,GAAG,CAACC,IAAJ,EAdR;;AAAA;AAAA;AAcRC,cAAAA,KAdQ,mBAcRA,KAdQ;;AAAA,mBAgBZA,KAhBY;AAAA;AAAA;AAAA;;AAiBd;AACAf,cAAAA,UAAU,CAACe,KAAD,CAAV;AAlBc;;AAAA;AAuBhB;AACAjB,cAAAA,OAAO,CAACW,OAAR,CAAgBC,KAAhB,GAAwB,EAAxB;AACAV,cAAAA,UAAU,CAAC,uDAAD,CAAV;;AAzBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATC,SAAS;AAAA;AAAA;AAAA,KAAf;;AA4BA,sBACE,QAAC,OAAD;AAAA,4BACG;AAAK,MAAA,SAAS,EAAC,2EAAf;AAAA,gBACEF,OAAO,GACJA,OADI;AADT;AAAA;AAAA;AAAA;AAAA,YADH,eAMA;AAAM,MAAA,QAAQ,EAAEE,SAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,aAAf;AAAA,kBAA8B;AAA9B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,WAAW,EAAC,OAHd;AAIE,QAAA,GAAG,EAAEH,OAJP;AAKE,QAAA,QAAQ,MALV;AAME,QAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE;AAAK,QAAA,SAAS,EAAC,4EAAf;AAAA,+BACA;AAAS,UAAA,IAAI,EAAC,QAAd;AAAA,oBAAwB;AAAxB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YANA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA1DuBD,S;;KAAAA,S","sourcesContent":["import React, { useRef, useState } from 'react';\nimport Section from './subscribe.style';\n\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null);\n  // 2. Hold a message in state to handle the response from our API.\n  const [message, setMessage] = useState('');\n\n  const subscribe = async (e) => {\n    e.preventDefault();\n\n    // 3. Send a request to our API with the user's email address.\n    const res = await fetch('/api/subscribe', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n\n    const { error } = await res.json();\n\n    if (error) {\n      // 4. If there was an error, update the message in state.\n      setMessage(error);\n\n      return;\n    }\n\n    // 5. Clear the input value and show a success message.\n    inputEl.current.value = '';\n    setMessage('Success! ðŸŽ‰ You are now subscribed to the newsletter.');\n  };\n\n  return (\n    <Section>\n       <div className=\"text-6xl md:text-6xl font-bold tracking-tighter leading-tight md:pr-8 p-4\">\n        {message\n          ? message\n          : `Newsletter? Yes!`}\n      </div>\n    <form onSubmit={subscribe}>\n      <label htmlFor=\"email-input\">{' '}</label>\n      <input\n        id=\"email-input\"\n        name=\"email\"\n        placeholder=\"Email\"\n        ref={inputEl}\n        required\n        type=\"email\"\n      />\n     \n      <div className=\"text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8 pt-4\">\n      <button  type=\"submit\">{'Submit '}</button>\n      </div>\n    </form>\n    </Section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}