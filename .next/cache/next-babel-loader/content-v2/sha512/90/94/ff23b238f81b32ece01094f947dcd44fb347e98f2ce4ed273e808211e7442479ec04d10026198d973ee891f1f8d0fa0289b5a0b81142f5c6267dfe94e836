{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/wendykelly/Desktop/explicit-christian/pages/tags/[slug].js\";\nimport Link from 'next/link';\nexport var __N_SSG = true;\nexport default function TagPage(tagData) {\n  var _this = this;\n\n  var _title = tagData.tag.name + ' - My blog';\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"The Underbelly\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"theme-color\",\n        content: \"#FF825C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"Description\",\n        content: \"Underbelly project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: tagData.tag.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: tagData.posts.map(function (post) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"border\",\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  href: \"/posts/[slug]\",\n                  as: \"/posts/\".concat(post.slug),\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mx-10\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      className: \"font-medium text-indigo-900\",\n                      children: post.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 29,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(\"blockquote\", {\n                      children: post.excerpt\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 32,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"last\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"date\",\n                        children: new Intl.DateTimeFormat('default', {\n                          year: 'numeric',\n                          month: 'short',\n                          day: 'numeric'\n                        }).format(new Date(post.published_at))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 34,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"dash\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 41,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"read\",\n                        children: [\"(reading time: \", post.reading_time, \" min.)\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 42,\n                        columnNumber: 29\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 33,\n                      columnNumber: 27\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 28,\n                    columnNumber: 25\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 27,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 19\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_c = TagPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagPage\");","map":{"version":3,"sources":["/Users/wendykelly/Desktop/explicit-christian/pages/tags/[slug].js"],"names":["Link","TagPage","tagData","_title","tag","name","posts","map","post","slug","title","excerpt","Intl","DateTimeFormat","year","month","day","format","Date","published_at","reading_time"],"mappings":";;;AACA,OAAOA,IAAP,MAAiB,WAAjB;;AAGA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AAAA;;AACvC,MAAIC,MAAM,GAAGD,OAAO,CAACE,GAAR,CAAYC,IAAZ,GAAmB,YAAhC;;AACA,sBACE;AAAA,4BAEI,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eASM,QAAC,OAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAA,qBACG,GADH,eAEE;AAAM,YAAA,SAAS,EAAC,WAAhB;AAAA,sBAA6BH,OAAO,CAACE,GAAR,CAAYC;AAAzC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA,oBACGH,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAkB,UAACC,IAAD;AAAA,gCACjB;AAAA,qCACE;AAAK,gBAAA,SAAS,EAAC,QAAf;AAAA,uCACE,QAAC,IAAD;AAAM,kBAAA,IAAI,EAAC,eAAX;AAA2B,kBAAA,EAAE,mBAAYA,IAAI,CAACC,IAAjB,CAA7B;AAAA,yCACE;AAAK,oBAAA,SAAS,EAAC,OAAf;AAAA,4CACE;AAAI,sBAAA,SAAS,EAAC,6BAAd;AAAA,gCACGD,IAAI,CAACE;AADR;AAAA;AAAA;AAAA;AAAA,6BADF,eAIE;AAAA,gCAAaF,IAAI,CAACG;AAAlB;AAAA;AAAA;AAAA;AAAA,6BAJF,eAKE;AAAK,sBAAA,SAAS,EAAC,MAAf;AAAA,8CACE;AAAK,wBAAA,SAAS,EAAC,MAAf;AAAA,kCACG,IAAIC,IAAI,CAACC,cAAT,CAAwB,SAAxB,EAAmC;AAClCC,0BAAAA,IAAI,EAAE,SAD4B;AAElCC,0BAAAA,KAAK,EAAE,OAF2B;AAGlCC,0BAAAA,GAAG,EAAE;AAH6B,yBAAnC,EAIEC,MAJF,CAIS,IAAIC,IAAJ,CAASV,IAAI,CAACW,YAAd,CAJT;AADH;AAAA;AAAA;AAAA;AAAA,+BADF,eAQE;AAAK,wBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,+BARF,eASE;AAAK,wBAAA,SAAS,EAAC,MAAf;AAAA,sDACkBX,IAAI,CAACY,YADvB;AAAA;AAAA;AAAA;AAAA;AAAA,+BATF;AAAA;AAAA;AAAA;AAAA;AAAA,6BALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBADiB;AAAA,WAAlB;AADH;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAoCE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cApCF;AAAA;AAAA;AAAA;AAAA;AAAA,YATN;AAAA,kBADF;AAkDD;KApDuBnB,O","sourcesContent":["import { getTags, getSingleTag, getPostsByTag } from '../api/ghost_data';\nimport Link from 'next/link';\n\n\nexport default function TagPage(tagData) {\n  let _title = tagData.tag.name + ' - My blog';\n  return (\n    <>\n     \n        <Head>\n          <title>The Underbelly</title>\n          <meta name=\"theme-color\" content=\"#FF825C\" />\n          <meta name=\"Description\" content=\"Underbelly project\" />\n        </Head>\n\n        \n          <Section>\n            <div className=\"mar\">\n              <h1>\n                {' '}\n                <span className=\"font-bold\">{tagData.tag.name}</span>\n              </h1>\n              <ul>\n                {tagData.posts.map((post) => (\n                  <li>\n                    <div className=\"border\">\n                      <Link href=\"/posts/[slug]\" as={`/posts/${post.slug}`}>\n                        <div className=\"mx-10\">\n                          <h3 className=\"font-medium text-indigo-900\">\n                            {post.title}\n                          </h3>\n                          <blockquote>{post.excerpt}</blockquote>\n                          <div className=\"last\">\n                            <div className=\"date\">\n                              {new Intl.DateTimeFormat('default', {\n                                year: 'numeric',\n                                month: 'short',\n                                day: 'numeric',\n                              }).format(new Date(post.published_at))}\n                            </div>\n                            <div className=\"dash\"></div>\n                            <div className=\"read\">\n                              (reading time: {post.reading_time} min.)\n                            </div>\n                          </div>\n                        </div>\n                      </Link>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <Footer />\n          </Section>\n        </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const tags = await getTags();\n  const paths = tags.map((tag) => ({\n    params: { slug: tag.slug },\n  }));\n  return { paths, fallback: false };\n}\n\n// Pass the tag slug over to the \"getSingleTag\" function\n// and retrieve all associated posts\n\nexport async function getStaticProps({ params }) {\n  const _tag = await getSingleTag(params.slug);\n  let _posts = (await getPostsByTag(params.slug)).sort((a, b) => {\n    return a.published_at > b.published_at ? -1 : 1;\n  });\n  return { props: { tag: _tag, posts: _posts } };\n}\n"]},"metadata":{},"sourceType":"module"}