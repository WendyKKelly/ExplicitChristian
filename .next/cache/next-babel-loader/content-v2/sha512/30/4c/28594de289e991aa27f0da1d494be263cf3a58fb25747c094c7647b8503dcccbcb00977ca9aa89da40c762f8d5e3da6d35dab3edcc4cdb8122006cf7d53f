{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/wendykelly/Desktop/explicit-christian/components/Subscribe/index.js\";\nimport React, { useRef, useState } from 'react';\nimport Section from './subscribe.style';\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null); // 2. Hold a message in state to handle the response from our API.\n\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n\n  const subscribe = async e => {\n    e.preventDefault(); // 3. Send a request to our API with the user's email address.\n\n    const res = await fetch('/api/subscribe', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n    const {\n      error\n    } = await res.json();\n\n    if (error) {\n      // 4. If there was an error, update the message in state.\n      setMessage(error);\n      return;\n    } // 5. Clear the input value and show a success message.\n\n\n    inputEl.current.value = '';\n    setMessage('Success! ðŸŽ‰ You are now subscribed to the newsletter.');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-6xl md:text-6xl font-bold tracking-tighter leading-tight md:pr-8 padding:1rem\",\n      children: message ? message : `Stay Connected:`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: subscribe,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email-input\",\n        children: ' '\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        placeholder: \"Email:\",\n        ref: inputEl,\n        required: true,\n        type: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: 'Submit '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/wendykelly/Desktop/explicit-christian/components/Subscribe/index.js"],"names":["React","useRef","useState","Section","Subscribe","inputEl","message","setMessage","subscribe","e","preventDefault","res","fetch","body","JSON","stringify","email","current","value","headers","method","error","json"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB,CAFkC,CAGlC;;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMM,SAAS,GAAG,MAAOC,CAAP,IAAa;AAC7BA,IAAAA,CAAC,CAACC,cAAF,GAD6B,CAG7B;;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAAmB;AACxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAEX,OAAO,CAACY,OAAR,CAAgBC;AADJ,OAAf,CADkC;AAIxCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAJ+B;AAOxCC,MAAAA,MAAM,EAAE;AAPgC,KAAnB,CAAvB;AAUA,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAMV,GAAG,CAACW,IAAJ,EAAxB;;AAEA,QAAID,KAAJ,EAAW;AACT;AACAd,MAAAA,UAAU,CAACc,KAAD,CAAV;AAEA;AACD,KArB4B,CAuB7B;;;AACAhB,IAAAA,OAAO,CAACY,OAAR,CAAgBC,KAAhB,GAAwB,EAAxB;AACAX,IAAAA,UAAU,CAAC,uDAAD,CAAV;AACD,GA1BD;;AA4BA,sBACE,QAAC,OAAD;AAAA,4BACG;AAAK,MAAA,SAAS,EAAC,oFAAf;AAAA,gBACED,OAAO,GACJA,OADI,GAEH;AAHN;AAAA;AAAA;AAAA;AAAA,YADH,eAMA;AAAM,MAAA,QAAQ,EAAEE,SAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,aAAf;AAAA,kBAA8B;AAA9B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,WAAW,EAAC,QAHd;AAIE,QAAA,GAAG,EAAEH,OAJP;AAKE,QAAA,QAAQ,MALV;AAME,QAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE;AAAK,QAAA,SAAS,EAAC,uEAAf;AAAA,+BACA;AAAS,UAAA,IAAI,EAAC,QAAd;AAAA,oBAAwB;AAAxB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YANA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD","sourcesContent":["import React, { useRef, useState } from 'react';\nimport Section from './subscribe.style';\n\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null);\n  // 2. Hold a message in state to handle the response from our API.\n  const [message, setMessage] = useState('');\n\n  const subscribe = async (e) => {\n    e.preventDefault();\n\n    // 3. Send a request to our API with the user's email address.\n    const res = await fetch('/api/subscribe', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n\n    const { error } = await res.json();\n\n    if (error) {\n      // 4. If there was an error, update the message in state.\n      setMessage(error);\n\n      return;\n    }\n\n    // 5. Clear the input value and show a success message.\n    inputEl.current.value = '';\n    setMessage('Success! ðŸŽ‰ You are now subscribed to the newsletter.');\n  };\n\n  return (\n    <Section>\n       <div className=\"text-6xl md:text-6xl font-bold tracking-tighter leading-tight md:pr-8 padding:1rem\">\n        {message\n          ? message\n          : `Stay Connected:`}\n      </div>\n    <form onSubmit={subscribe}>\n      <label htmlFor=\"email-input\">{' '}</label>\n      <input\n        id=\"email-input\"\n        name=\"email\"\n        placeholder=\"Email:\"\n        ref={inputEl}\n        required\n        type=\"email\"\n      />\n     \n      <div className=\"text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8\">\n      <button  type=\"submit\">{'Submit '}</button></div>\n    </form>\n    </Section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}